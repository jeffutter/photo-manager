// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as Css from "../node_modules/bs-css/src/Css.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "../node_modules/bs-platform/lib/es6/js_exn.js";
import * as Caml_int32 from "../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as ReasonReact from "../node_modules/reason-react/src/ReasonReact.js";
import * as Grid$PhotoManager from "./Grid.bs.js";
import * as Utils$PhotoManager from "./Utils.bs.js";
import * as AutoSizer$PhotoManager from "./AutoSizer.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as GalleryImage$PhotoManager from "./GalleryImage.bs.js";
import * as GalleryThumb$PhotoManager from "./GalleryThumb.bs.js";

var component = ReasonReact.statelessComponent("GalleryBody");

function columns(width) {
  if (width > 2000 || width > 1750) {
    return 5;
  } else if (width > 1400) {
    return 4;
  } else if (width > 1050) {
    return 3;
  } else if (width > 700) {
    return 2;
  } else {
    return 1;
  }
}

function gutter(width) {
  if (width > 2000) {
    return 100;
  } else {
    return 50;
  }
}

function cls(gridMargin) {
  return Css.style(/* :: */[
              Css.margin2(Css.px(0), Css.px(gridMargin)),
              /* :: */[
                Css.outlineStyle(/* none */-922086728),
                /* [] */0
              ]
            ]);
}

function marginCls(cellPadding) {
  return Css.style(/* :: */[
              Css.margin4(Css.px(10), /* zero */-789508312, /* zero */-789508312, Css.px(cellPadding)),
              /* [] */0
            ]);
}

function cellRenderer(loadImage, openLightbox, grid, marginCls, options) {
  var columnIndex = options.columnIndex;
  var rowIndex = options.rowIndex;
  var key = options.key;
  var style = options.style;
  var exit = 0;
  var row;
  try {
    row = List.nth(grid, rowIndex);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return React.createElement("div", {
                  key: key,
                  style: style
                });
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var exit$1 = 0;
    var cell;
    try {
      cell = List.nth(row, columnIndex);
      exit$1 = 2;
    }
    catch (raw_exn$1){
      var exn$1 = Js_exn.internalToOCamlException(raw_exn$1);
      if (exn$1[0] === Caml_builtin_exceptions.failure) {
        return React.createElement("div", {
                    key: key,
                    style: style
                  });
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 2) {
      var tmp;
      if (cell[0] >= 121710777) {
        var gallery = cell[1];
        tmp = ReasonReact.element(/* Some */[key], /* None */0, GalleryThumb$PhotoManager.make(gallery.name, gallery.slug, /* array */[]));
      } else {
        var image = cell[1];
        var match = image.thumbnail;
        if (!match) {
          Curry._1(loadImage, image.slug);
        }
        tmp = ReasonReact.element(/* Some */[key], /* None */0, GalleryImage$PhotoManager.make(image.name, image.slug, image.thumbnail, image.rating, (function () {
                    return Curry._1(openLightbox, image.slug);
                  }), /* array */[]));
      }
      return React.createElement("div", {
                  key: key,
                  className: marginCls,
                  style: style
                }, tmp);
    }
    
  }
  
}

function rowHeight(grid, param) {
  var exit = 0;
  var row;
  try {
    row = List.nth(grid, param[/* index */0]);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return 325;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var match = List.for_all((function (item) {
            if (typeof item === "number") {
              return false;
            } else {
              return item[0] === 121710777;
            }
          }), row);
    if (match) {
      return 300;
    } else {
      return 325;
    }
  }
  
}

function make($staropt$star, openLightbox, loadImage, windowHeight, isScrolling, onScroll, scrollTop, _) {
  var descendants = $staropt$star ? $staropt$star[0] : /* array */[];
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var listDescendants = $$Array.to_list(descendants);
              return ReasonReact.element(/* None */0, /* None */0, AutoSizer$PhotoManager.make(/* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, (function (size) {
                                var parentWidth = size.width;
                                var columns$1 = columns(parentWidth);
                                var gutter$1 = gutter(parentWidth);
                                var cellWidth = 300 + gutter$1 | 0;
                                var gridWidth = Caml_int32.imul(cellWidth, columns$1);
                                var gridMargin = (parentWidth - gridWidth | 0) / 2 | 0;
                                var cellPadding = (cellWidth - 300 | 0) / 2 | 0;
                                var grid = Utils$PhotoManager.chunkList(columns$1, listDescendants);
                                var partial_arg = marginCls(cellPadding);
                                return ReasonReact.element(/* None */0, /* None */0, Grid$PhotoManager.make(/* Some */[true], (function (param) {
                                                  return cellRenderer(loadImage, openLightbox, grid, partial_arg, param);
                                                }), /* Some */[cls(gridMargin)], columns$1, cellWidth, windowHeight, /* Some */[isScrolling], /* Some */[onScroll], /* None */0, /* Some */[5], List.length(grid), (function (param) {
                                                  return rowHeight(grid, param);
                                                }), /* Some */[scrollTop], gridWidth, /* array */[]));
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var imageWidth = 300;

var imageHeight = 325;

var galleryHeight = 300;

var baseGutter = 50;

export {
  component ,
  imageWidth ,
  imageHeight ,
  galleryHeight ,
  baseGutter ,
  columns ,
  gutter ,
  cls ,
  marginCls ,
  cellRenderer ,
  rowHeight ,
  make ,
  
}
/* component Not a pure module */
