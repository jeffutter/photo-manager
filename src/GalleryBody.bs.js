// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "../node_modules/bs-css-emotion/src/Css.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_int32 from "../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as ReactVirtualized from "react-virtualized";
import * as Caml_js_exceptions from "../node_modules/bs-platform/lib/es6/caml_js_exceptions.js";
import * as Utils$PhotoManager from "./Utils.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as GalleryImage$PhotoManager from "./GalleryImage.bs.js";
import * as GalleryThumb$PhotoManager from "./GalleryThumb.bs.js";

function columns(width) {
  if (width > 2000 || width > 1750) {
    return 5;
  } else if (width > 1400) {
    return 4;
  } else if (width > 1050) {
    return 3;
  } else if (width > 700) {
    return 2;
  } else {
    return 1;
  }
}

function gutter(width) {
  if (width > 2000) {
    return 100;
  } else {
    return 50;
  }
}

function cls(gridMargin) {
  return Curry._1(Css.style, /* :: */[
              Css.margin2(Css.px(0), Css.px(gridMargin)),
              /* :: */[
                Css.outlineStyle(/* none */-922086728),
                /* [] */0
              ]
            ]);
}

function marginCls(cellPadding) {
  return Curry._1(Css.style, /* :: */[
              Css.margin4(Css.px(10), /* zero */-789508312, /* zero */-789508312, Css.px(cellPadding)),
              /* [] */0
            ]);
}

function cellRenderer(loadImage, isScrolling, openLightbox, grid, marginCls, options) {
  var columnIndex = options.columnIndex;
  var rowIndex = options.rowIndex;
  var key = options.key;
  var style = options.style;
  var exit = 0;
  var row;
  try {
    row = List.nth(grid, rowIndex);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return React.createElement("div", {
                  key: key,
                  style: style
                });
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var cell;
    try {
      cell = List.nth(row, columnIndex);
    }
    catch (raw_exn$1){
      var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
      if (exn$1[0] === Caml_builtin_exceptions.failure) {
        return React.createElement("div", {
                    key: key,
                    style: style
                  });
      } else {
        throw exn$1;
      }
    }
    var tmp;
    if (cell[0] >= 121710777) {
      var gallery = cell[1];
      tmp = React.createElement(GalleryThumb$PhotoManager.make, {
            name: gallery.name,
            slug: gallery.slug,
            key: key
          });
    } else {
      var image = cell[1];
      var match = image.thumbnail;
      if (match === undefined) {
        if (isScrolling) {
          
        } else {
          Curry._1(loadImage, image.slug);
        }
      }
      tmp = React.createElement(GalleryImage$PhotoManager.make, {
            name: image.name,
            slug: image.slug,
            thumbnail: image.thumbnail,
            rating: image.rating,
            handleOpen: (function (_event) {
                return Curry._1(openLightbox, image.slug);
              }),
            key: key
          });
    }
    return React.createElement("div", {
                key: key,
                className: marginCls,
                style: style
              }, tmp);
  }
  
}

function rowHeight(grid, param) {
  var row;
  try {
    row = List.nth(grid, param.index);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return 325;
    } else {
      throw exn;
    }
  }
  if (List.for_all((function (item) {
            return typeof item === "number" ? false : item[0] === 121710777;
          }), row)) {
    return 300;
  } else {
    return 325;
  }
}

function GalleryBody(Props) {
  var descendantsOpt = Props.descendants;
  var openLightbox = Props.openLightbox;
  var loadImage = Props.loadImage;
  var windowHeight = Props.windowHeight;
  var isScrolling = Props.isScrolling;
  var onScroll = Props.onScroll;
  var scrollTop = Props.scrollTop;
  var descendants = descendantsOpt !== undefined ? descendantsOpt : [];
  var listDescendants = $$Array.to_list(descendants);
  return React.createElement(ReactVirtualized.AutoSizer, {
              disableHeight: true,
              disableWidth: false,
              children: (function (size) {
                  var parentWidth = size.width;
                  var columns$1 = columns(parentWidth);
                  var gutter$1 = gutter(parentWidth);
                  var cellWidth = 300 + gutter$1 | 0;
                  var gridWidth = Caml_int32.imul(cellWidth, columns$1);
                  var gridMargin = (parentWidth - gridWidth | 0) / 2 | 0;
                  var cellPadding = (cellWidth - 300 | 0) / 2 | 0;
                  var grid = Utils$PhotoManager.chunkList(columns$1, listDescendants);
                  var partial_arg = marginCls(cellPadding);
                  return React.createElement(ReactVirtualized.Grid, {
                              autoHeight: true,
                              cellRenderer: (function (param) {
                                  return cellRenderer(loadImage, isScrolling, openLightbox, grid, partial_arg, param);
                                }),
                              className: cls(gridMargin),
                              columnCount: columns$1,
                              columnWidth: cellWidth,
                              height: windowHeight,
                              isScrolling: isScrolling,
                              onScroll: onScroll,
                              overscanRowCount: 5,
                              rowCount: List.length(grid),
                              rowHeight: (function (param) {
                                  return rowHeight(grid, param);
                                }),
                              scrollTop: scrollTop,
                              width: gridWidth
                            });
                })
            });
}

var imageWidth = 300;

var imageHeight = 325;

var galleryHeight = 300;

var baseGutter = 50;

var make = GalleryBody;

export {
  imageWidth ,
  imageHeight ,
  galleryHeight ,
  baseGutter ,
  columns ,
  gutter ,
  cls ,
  marginCls ,
  cellRenderer ,
  rowHeight ,
  make ,
  
}
/* Css Not a pure module */
