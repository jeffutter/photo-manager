// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Belt_Option from "../node_modules/bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/bs-platform/lib/es6/caml_option.js";

function makeCancelable($staropt$star, fn) {
  var wait = $staropt$star !== undefined ? $staropt$star : 100;
  var timerId = /* record */[/* contents */undefined];
  var lastArg = /* record */[/* contents */undefined];
  var lastCallTime = /* record */[/* contents */undefined];
  var shouldInvoke = function (time) {
    var match = lastCallTime[0];
    if (match !== undefined) {
      var timeSinceLastCall = time - match | 0;
      if (timeSinceLastCall >= wait) {
        return true;
      } else {
        return timeSinceLastCall < 0;
      }
    } else {
      return true;
    }
  };
  var remainingWait = function (time) {
    var match = lastCallTime[0];
    if (match !== undefined) {
      var timeSinceLastCall = time - match | 0;
      return wait - timeSinceLastCall | 0;
    } else {
      return wait;
    }
  };
  var timerExpired = function (param) {
    var match = timerId[0];
    if (match !== undefined) {
      clearTimeout(Caml_option.valFromOption(match));
    }
    var time = Date.now() | 0;
    if (shouldInvoke(time)) {
      var x = lastArg[0];
      if (x !== undefined) {
        lastArg[0] = undefined;
        timerId[0] = undefined;
        return Curry._1(fn, Caml_option.valFromOption(x));
      } else {
        timerId[0] = undefined;
        return /* () */0;
      }
    } else {
      timerId[0] = Caml_option.some(setTimeout(timerExpired, remainingWait(time)));
      return /* () */0;
    }
  };
  var schedule = function (x) {
    var time = Date.now() | 0;
    lastArg[0] = Caml_option.some(x);
    lastCallTime[0] = time;
    timerId[0] = Caml_option.some(setTimeout(timerExpired, wait));
    return /* () */0;
  };
  var scheduled = function (param) {
    return Belt_Option.isSome(timerId[0]);
  };
  var cancel = function (param) {
    var match = timerId[0];
    if (match !== undefined) {
      clearTimeout(Caml_option.valFromOption(match));
      timerId[0] = undefined;
      lastArg[0] = undefined;
      lastCallTime[0] = undefined;
      return /* () */0;
    } else {
      return /* () */0;
    }
  };
  var now = function (x) {
    cancel(/* () */0);
    return Curry._1(fn, x);
  };
  return /* record */[
          /* invoke */now,
          /* schedule */schedule,
          /* scheduled */scheduled,
          /* cancel */cancel
        ];
}

function make(wait, fn) {
  return makeCancelable(wait, fn)[/* schedule */1];
}

export {
  makeCancelable ,
  make ,
  
}
/* No side effect */
