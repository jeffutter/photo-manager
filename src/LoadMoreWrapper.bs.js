// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as ReasonReact from "../node_modules/reason-react/src/ReasonReact.js";
import * as ReasonApollo from "../node_modules/reason-apollo/src/ReasonApollo.bs.js";
import * as Js_null_undefined from "../node_modules/bs-platform/lib/es6/js_null_undefined.js";
import * as GalleryQueries$PhotoManager from "./GalleryQueries.bs.js";

var Query = ReasonApollo.CreateQuery([
      GalleryQueries$PhotoManager.MoreQuery[2],
      GalleryQueries$PhotoManager.MoreQuery[3]
    ]);

var component = ReasonReact.statelessComponent("LoadMoreWrapper");

function updateQuery(previousResult, newResults) {
  var match = newResults.fetchMoreResult;
  if (match !== undefined) {
    var match$1 = previousResult.gallery;
    var match$2 = match.gallery;
    var combinedGallery;
    if (match$1) {
      var previousGallery = match$1[0];
      if (match$2) {
        var match$3 = previousGallery.descendants;
        var match$4 = match$2[0].descendants;
        var combinedDescendants;
        if (match$3) {
          var previousDescendants = match$3[0];
          combinedDescendants = match$4 ? /* Some */[$$Array.append(previousDescendants, match$4[0])] : /* Some */[previousDescendants];
        } else {
          combinedDescendants = match$4 ? /* Some */[match$4[0]] : /* Some */[/* array */[]];
        }
        combinedGallery = /* Some */[{
            id: previousGallery.id,
            name: previousGallery.name,
            path: previousGallery.path,
            slug: previousGallery.slug,
            descendants: Js_null_undefined.fromOption(combinedDescendants),
            __typename: previousGallery.__typename
          }];
      } else {
        combinedGallery = /* Some */[{
            id: previousGallery.id,
            name: previousGallery.name,
            path: previousGallery.path,
            slug: previousGallery.slug,
            descendants: Js_null_undefined.fromOption(previousGallery.descendants),
            __typename: previousGallery.__typename
          }];
      }
    } else if (match$2) {
      var moreGallery = match$2[0];
      combinedGallery = /* Some */[{
          id: moreGallery.id,
          name: moreGallery.name,
          path: moreGallery.path,
          slug: moreGallery.slug,
          descendants: Js_null_undefined.fromOption(moreGallery.descendants),
          __typename: moreGallery.__typename
        }];
    } else {
      combinedGallery = /* None */0;
    }
    return {
            gallery: Js_null_undefined.fromOption(combinedGallery)
          };
  } else {
    return {
            gallery: null
          };
  }
}

function make(slug, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              console.log("Render load more wrapper");
              var loadMoreQuery = GalleryQueries$PhotoManager.MoreQuery[/* make */7](slug, /* array */[], /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(Query[/* make */3], [
                              /* Some */[loadMoreQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var fetchMore = param[/* fetchMore */5];
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return Curry._2(children, /* None */0, (function (param) {
                                                  return Curry._2(fetchMore, param, updateQuery);
                                                }));
                                  } else if (result.tag) {
                                    return Curry._2(children, result[0].gallery, (function (param) {
                                                  return Curry._2(fetchMore, param, updateQuery);
                                                }));
                                  } else {
                                    return Curry._2(children, /* None */0, (function (param) {
                                                  return Curry._2(fetchMore, param, updateQuery);
                                                }));
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  Query ,
  component ,
  updateQuery ,
  make ,
  
}
/* Query Not a pure module */
