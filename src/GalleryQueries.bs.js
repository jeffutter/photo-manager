// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_exn from "../node_modules/bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "../node_modules/bs-platform/lib/es6/js_dict.js";
import * as Js_json from "../node_modules/bs-platform/lib/es6/js_json.js";
import * as Js_option from "../node_modules/bs-platform/lib/es6/js_option.js";
import * as Caml_option from "../node_modules/bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "query gallery($slug: String!)  {\ngallery(slug: $slug)  {\nid  \n__typename  \nname  \npath  \nslug  \ntotalDescendants  \ndescendants  {\n__typename\n...on Gallery   {\nid  \n__typename  \nname  \npath  \nslug  \n}\n\n...on Image   {\nid  \n__typename  \nname  \npath  \nslug  \nsize  \nwidth  \nheight  \nrating  \nsmallUrl  \nmediumUrl  \nlargeUrl  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gallery");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Gallery is missing");
      }
      var match$4 = Js_dict.get(value$3, "__typename");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field __typename on type Gallery is missing");
      }
      var match$6 = Js_dict.get(value$3, "name");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Gallery is missing");
      }
      var match$8 = Js_dict.get(value$3, "path");
      var match$9 = Js_dict.get(value$3, "slug");
      var tmp$4;
      if (match$9 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$9);
        var match$10 = Js_json.decodeString(value$7);
        tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field slug on type Gallery is missing");
      }
      var match$11 = Js_dict.get(value$3, "totalDescendants");
      var tmp$5;
      if (match$11 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$8);
        if (match$12 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$13 = Js_json.decodeNumber(value$8);
          tmp$5 = match$13 !== undefined ? match$13 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      var match$14 = Js_dict.get(value$3, "descendants");
      var tmp$6;
      if (match$14 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$14);
        var match$15 = Js_json.decodeNull(value$9);
        tmp$6 = match$15 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$9)).map((function (value) {
                  var match = Js_json.decodeObject(value);
                  if (match !== undefined) {
                    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "__typename");
                    if (match$1 !== undefined) {
                      var match$2 = Js_json.decodeString(Caml_option.valFromOption(match$1));
                      if (match$2 !== undefined) {
                        var typename = match$2;
                        switch (typename) {
                          case "Gallery" :
                              var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$3 = Js_dict.get(value$1, "id");
                              var tmp;
                              if (match$3 !== undefined) {
                                var value$2 = Caml_option.valFromOption(match$3);
                                var match$4 = Js_json.decodeString(value$2);
                                tmp = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              } else {
                                tmp = Js_exn.raiseError("graphql_ppx: Field id on type Gallery is missing");
                              }
                              var match$5 = Js_dict.get(value$1, "__typename");
                              var tmp$1;
                              if (match$5 !== undefined) {
                                var value$3 = Caml_option.valFromOption(match$5);
                                var match$6 = Js_json.decodeString(value$3);
                                tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              } else {
                                tmp$1 = Js_exn.raiseError("graphql_ppx: Field __typename on type Gallery is missing");
                              }
                              var match$7 = Js_dict.get(value$1, "name");
                              var tmp$2;
                              if (match$7 !== undefined) {
                                var value$4 = Caml_option.valFromOption(match$7);
                                var match$8 = Js_json.decodeString(value$4);
                                tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              } else {
                                tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Gallery is missing");
                              }
                              var match$9 = Js_dict.get(value$1, "path");
                              var match$10 = Js_dict.get(value$1, "slug");
                              var tmp$3;
                              if (match$10 !== undefined) {
                                var value$5 = Caml_option.valFromOption(match$10);
                                var match$11 = Js_json.decodeString(value$5);
                                tmp$3 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                              } else {
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Field slug on type Gallery is missing");
                              }
                              return /* `Gallery */[
                                      -938956686,
                                      {
                                        id: tmp,
                                        __typename: tmp$1,
                                        name: tmp$2,
                                        path: match$9 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$9))).map((function (value) {
                                                  var match = Js_json.decodeString(value);
                                                  if (match !== undefined) {
                                                    return match;
                                                  } else {
                                                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                                  }
                                                })) : Js_exn.raiseError("graphql_ppx: Field path on type Gallery is missing"),
                                        slug: tmp$3
                                      }
                                    ];
                          case "Image" :
                              var value$6 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$12 = Js_dict.get(value$6, "id");
                              var tmp$4;
                              if (match$12 !== undefined) {
                                var value$7 = Caml_option.valFromOption(match$12);
                                var match$13 = Js_json.decodeString(value$7);
                                tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                              } else {
                                tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Image is missing");
                              }
                              var match$14 = Js_dict.get(value$6, "__typename");
                              var tmp$5;
                              if (match$14 !== undefined) {
                                var value$8 = Caml_option.valFromOption(match$14);
                                var match$15 = Js_json.decodeString(value$8);
                                tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                              } else {
                                tmp$5 = Js_exn.raiseError("graphql_ppx: Field __typename on type Image is missing");
                              }
                              var match$16 = Js_dict.get(value$6, "name");
                              var tmp$6;
                              if (match$16 !== undefined) {
                                var value$9 = Caml_option.valFromOption(match$16);
                                var match$17 = Js_json.decodeString(value$9);
                                tmp$6 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                              } else {
                                tmp$6 = Js_exn.raiseError("graphql_ppx: Field name on type Image is missing");
                              }
                              var match$18 = Js_dict.get(value$6, "path");
                              var match$19 = Js_dict.get(value$6, "slug");
                              var tmp$7;
                              if (match$19 !== undefined) {
                                var value$10 = Caml_option.valFromOption(match$19);
                                var match$20 = Js_json.decodeString(value$10);
                                tmp$7 = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                              } else {
                                tmp$7 = Js_exn.raiseError("graphql_ppx: Field slug on type Image is missing");
                              }
                              var match$21 = Js_dict.get(value$6, "size");
                              var tmp$8;
                              if (match$21 !== undefined) {
                                var value$11 = Caml_option.valFromOption(match$21);
                                var match$22 = Js_json.decodeNull(value$11);
                                if (match$22 !== undefined) {
                                  tmp$8 = undefined;
                                } else {
                                  var match$23 = Js_json.decodeString(value$11);
                                  tmp$8 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                                }
                              } else {
                                tmp$8 = undefined;
                              }
                              var match$24 = Js_dict.get(value$6, "width");
                              var tmp$9;
                              if (match$24 !== undefined) {
                                var value$12 = Caml_option.valFromOption(match$24);
                                var match$25 = Js_json.decodeNull(value$12);
                                if (match$25 !== undefined) {
                                  tmp$9 = undefined;
                                } else {
                                  var match$26 = Js_json.decodeNumber(value$12);
                                  tmp$9 = match$26 !== undefined ? match$26 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$12));
                                }
                              } else {
                                tmp$9 = undefined;
                              }
                              var match$27 = Js_dict.get(value$6, "height");
                              var tmp$10;
                              if (match$27 !== undefined) {
                                var value$13 = Caml_option.valFromOption(match$27);
                                var match$28 = Js_json.decodeNull(value$13);
                                if (match$28 !== undefined) {
                                  tmp$10 = undefined;
                                } else {
                                  var match$29 = Js_json.decodeNumber(value$13);
                                  tmp$10 = match$29 !== undefined ? match$29 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$13));
                                }
                              } else {
                                tmp$10 = undefined;
                              }
                              var match$30 = Js_dict.get(value$6, "rating");
                              var tmp$11;
                              if (match$30 !== undefined) {
                                var value$14 = Caml_option.valFromOption(match$30);
                                var match$31 = Js_json.decodeNull(value$14);
                                if (match$31 !== undefined) {
                                  tmp$11 = undefined;
                                } else {
                                  var match$32 = Js_json.decodeNumber(value$14);
                                  tmp$11 = match$32 !== undefined ? match$32 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$14));
                                }
                              } else {
                                tmp$11 = undefined;
                              }
                              var match$33 = Js_dict.get(value$6, "smallUrl");
                              var tmp$12;
                              if (match$33 !== undefined) {
                                var value$15 = Caml_option.valFromOption(match$33);
                                var match$34 = Js_json.decodeNull(value$15);
                                if (match$34 !== undefined) {
                                  tmp$12 = undefined;
                                } else {
                                  var match$35 = Js_json.decodeString(value$15);
                                  tmp$12 = match$35 !== undefined ? match$35 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
                                }
                              } else {
                                tmp$12 = undefined;
                              }
                              var match$36 = Js_dict.get(value$6, "mediumUrl");
                              var tmp$13;
                              if (match$36 !== undefined) {
                                var value$16 = Caml_option.valFromOption(match$36);
                                var match$37 = Js_json.decodeNull(value$16);
                                if (match$37 !== undefined) {
                                  tmp$13 = undefined;
                                } else {
                                  var match$38 = Js_json.decodeString(value$16);
                                  tmp$13 = match$38 !== undefined ? match$38 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
                                }
                              } else {
                                tmp$13 = undefined;
                              }
                              var match$39 = Js_dict.get(value$6, "largeUrl");
                              var tmp$14;
                              if (match$39 !== undefined) {
                                var value$17 = Caml_option.valFromOption(match$39);
                                var match$40 = Js_json.decodeNull(value$17);
                                if (match$40 !== undefined) {
                                  tmp$14 = undefined;
                                } else {
                                  var match$41 = Js_json.decodeString(value$17);
                                  tmp$14 = match$41 !== undefined ? match$41 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$17));
                                }
                              } else {
                                tmp$14 = undefined;
                              }
                              return /* `Image */[
                                      -795439301,
                                      {
                                        id: tmp$4,
                                        __typename: tmp$5,
                                        name: tmp$6,
                                        path: match$18 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$18))).map((function (value) {
                                                  var match = Js_json.decodeString(value);
                                                  if (match !== undefined) {
                                                    return match;
                                                  } else {
                                                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                                  }
                                                })) : Js_exn.raiseError("graphql_ppx: Field path on type Image is missing"),
                                        slug: tmp$7,
                                        size: tmp$8,
                                        width: tmp$9,
                                        height: tmp$10,
                                        rating: tmp$11,
                                        smallUrl: tmp$12,
                                        mediumUrl: tmp$13,
                                        largeUrl: tmp$14
                                      }
                                    ];
                          default:
                            return Js_exn.raiseError("graphql_ppx: Union Descendants returned unknown type " + typename);
                        }
                      } else {
                        return Js_exn.raiseError("graphql_ppx: Union Descendants has a __typename field that is not a string");
                      }
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Union Descendants is missing the __typename field");
                    }
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected union Descendants to be an object, got " + JSON.stringify(value));
                  }
                }));
      } else {
        tmp$6 = undefined;
      }
      tmp = {
        id: tmp$1,
        __typename: tmp$2,
        name: tmp$3,
        path: match$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$8))).map((function (value) {
                  var match = Js_json.decodeString(value);
                  if (match !== undefined) {
                    return match;
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                  }
                })) : Js_exn.raiseError("graphql_ppx: Field path on type Gallery is missing"),
        slug: tmp$4,
        totalDescendants: tmp$5,
        descendants: tmp$6
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gallery: tmp
        };
}

function make(slug, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "slug",
                    slug
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var slug = variables.slug;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([/* tuple */[
                    "slug",
                    slug
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(slug, param) {
  return Js_dict.fromArray([/* tuple */[
                  "slug",
                  slug
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, slug, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([/* tuple */[
                      "slug",
                      slug
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var GalleryQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "query gallery($slug: String!, $slugs: [String!]!)  {\ngallery(slug: $slug)  {\nid  \n__typename  \nname  \npath  \nslug  \ndescendants(slugs: $slugs)  {\n__typename\n...on Gallery   {\nid  \n__typename  \nname  \npath  \nslug  \n}\n\n...on Image   {\nid  \n__typename  \nname  \npath  \nslug  \nthumbnail  \n}\n\n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gallery");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Gallery is missing");
      }
      var match$4 = Js_dict.get(value$3, "__typename");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field __typename on type Gallery is missing");
      }
      var match$6 = Js_dict.get(value$3, "name");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Gallery is missing");
      }
      var match$8 = Js_dict.get(value$3, "path");
      var match$9 = Js_dict.get(value$3, "slug");
      var tmp$4;
      if (match$9 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$9);
        var match$10 = Js_json.decodeString(value$7);
        tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field slug on type Gallery is missing");
      }
      var match$11 = Js_dict.get(value$3, "descendants");
      var tmp$5;
      if (match$11 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$8);
        tmp$5 = match$12 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$8)).map((function (value) {
                  var match = Js_json.decodeObject(value);
                  if (match !== undefined) {
                    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "__typename");
                    if (match$1 !== undefined) {
                      var match$2 = Js_json.decodeString(Caml_option.valFromOption(match$1));
                      if (match$2 !== undefined) {
                        var typename = match$2;
                        switch (typename) {
                          case "Gallery" :
                              var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$3 = Js_dict.get(value$1, "id");
                              var tmp;
                              if (match$3 !== undefined) {
                                var value$2 = Caml_option.valFromOption(match$3);
                                var match$4 = Js_json.decodeString(value$2);
                                tmp = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              } else {
                                tmp = Js_exn.raiseError("graphql_ppx: Field id on type Gallery is missing");
                              }
                              var match$5 = Js_dict.get(value$1, "__typename");
                              var tmp$1;
                              if (match$5 !== undefined) {
                                var value$3 = Caml_option.valFromOption(match$5);
                                var match$6 = Js_json.decodeString(value$3);
                                tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              } else {
                                tmp$1 = Js_exn.raiseError("graphql_ppx: Field __typename on type Gallery is missing");
                              }
                              var match$7 = Js_dict.get(value$1, "name");
                              var tmp$2;
                              if (match$7 !== undefined) {
                                var value$4 = Caml_option.valFromOption(match$7);
                                var match$8 = Js_json.decodeString(value$4);
                                tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              } else {
                                tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Gallery is missing");
                              }
                              var match$9 = Js_dict.get(value$1, "path");
                              var match$10 = Js_dict.get(value$1, "slug");
                              var tmp$3;
                              if (match$10 !== undefined) {
                                var value$5 = Caml_option.valFromOption(match$10);
                                var match$11 = Js_json.decodeString(value$5);
                                tmp$3 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                              } else {
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Field slug on type Gallery is missing");
                              }
                              return /* `Gallery */[
                                      -938956686,
                                      {
                                        id: tmp,
                                        __typename: tmp$1,
                                        name: tmp$2,
                                        path: match$9 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$9))).map((function (value) {
                                                  var match = Js_json.decodeString(value);
                                                  if (match !== undefined) {
                                                    return match;
                                                  } else {
                                                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                                  }
                                                })) : Js_exn.raiseError("graphql_ppx: Field path on type Gallery is missing"),
                                        slug: tmp$3
                                      }
                                    ];
                          case "Image" :
                              var value$6 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$12 = Js_dict.get(value$6, "id");
                              var tmp$4;
                              if (match$12 !== undefined) {
                                var value$7 = Caml_option.valFromOption(match$12);
                                var match$13 = Js_json.decodeString(value$7);
                                tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                              } else {
                                tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Image is missing");
                              }
                              var match$14 = Js_dict.get(value$6, "__typename");
                              var tmp$5;
                              if (match$14 !== undefined) {
                                var value$8 = Caml_option.valFromOption(match$14);
                                var match$15 = Js_json.decodeString(value$8);
                                tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                              } else {
                                tmp$5 = Js_exn.raiseError("graphql_ppx: Field __typename on type Image is missing");
                              }
                              var match$16 = Js_dict.get(value$6, "name");
                              var tmp$6;
                              if (match$16 !== undefined) {
                                var value$9 = Caml_option.valFromOption(match$16);
                                var match$17 = Js_json.decodeString(value$9);
                                tmp$6 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                              } else {
                                tmp$6 = Js_exn.raiseError("graphql_ppx: Field name on type Image is missing");
                              }
                              var match$18 = Js_dict.get(value$6, "path");
                              var match$19 = Js_dict.get(value$6, "slug");
                              var tmp$7;
                              if (match$19 !== undefined) {
                                var value$10 = Caml_option.valFromOption(match$19);
                                var match$20 = Js_json.decodeString(value$10);
                                tmp$7 = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                              } else {
                                tmp$7 = Js_exn.raiseError("graphql_ppx: Field slug on type Image is missing");
                              }
                              var match$21 = Js_dict.get(value$6, "thumbnail");
                              var tmp$8;
                              if (match$21 !== undefined) {
                                var value$11 = Caml_option.valFromOption(match$21);
                                var match$22 = Js_json.decodeNull(value$11);
                                if (match$22 !== undefined) {
                                  tmp$8 = undefined;
                                } else {
                                  var match$23 = Js_json.decodeString(value$11);
                                  tmp$8 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                                }
                              } else {
                                tmp$8 = undefined;
                              }
                              return /* `Image */[
                                      -795439301,
                                      {
                                        id: tmp$4,
                                        __typename: tmp$5,
                                        name: tmp$6,
                                        path: match$18 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$18))).map((function (value) {
                                                  var match = Js_json.decodeString(value);
                                                  if (match !== undefined) {
                                                    return match;
                                                  } else {
                                                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                                  }
                                                })) : Js_exn.raiseError("graphql_ppx: Field path on type Image is missing"),
                                        slug: tmp$7,
                                        thumbnail: tmp$8
                                      }
                                    ];
                          default:
                            return Js_exn.raiseError("graphql_ppx: Union Descendants returned unknown type " + typename);
                        }
                      } else {
                        return Js_exn.raiseError("graphql_ppx: Union Descendants has a __typename field that is not a string");
                      }
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Union Descendants is missing the __typename field");
                    }
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected union Descendants to be an object, got " + JSON.stringify(value));
                  }
                }));
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        __typename: tmp$2,
        name: tmp$3,
        path: match$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$8))).map((function (value) {
                  var match = Js_json.decodeString(value);
                  if (match !== undefined) {
                    return match;
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                  }
                })) : Js_exn.raiseError("graphql_ppx: Field path on type Gallery is missing"),
        slug: tmp$4,
        descendants: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gallery: tmp
        };
}

function make$1(slug, slugs, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "slug",
                    slug
                  ],
                  /* tuple */[
                    "slugs",
                    slugs.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var slug = variables.slug;
  var slugs = variables.slugs;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "slug",
                    slug
                  ],
                  /* tuple */[
                    "slugs",
                    slugs.map((function (prim) {
                            return prim;
                          }))
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(slug, slugs, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "slug",
                  slug
                ],
                /* tuple */[
                  "slugs",
                  slugs.map((function (prim) {
                          return prim;
                        }))
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, slug, slugs, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "slug",
                      slug
                    ],
                    /* tuple */[
                      "slugs",
                      slugs.map((function (prim) {
                              return prim;
                            }))
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var MoreQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "mutation rateImage($slug: String!, $rating: Int!)  {\nrateImage(slug: $slug, rating: $rating)  {\nid  \n__typename  \nname  \npath  \nslug  \nrating  \n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "rateImage");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Image is missing");
      }
      var match$4 = Js_dict.get(value$3, "__typename");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field __typename on type Image is missing");
      }
      var match$6 = Js_dict.get(value$3, "name");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Image is missing");
      }
      var match$8 = Js_dict.get(value$3, "path");
      var match$9 = Js_dict.get(value$3, "slug");
      var tmp$4;
      if (match$9 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$9);
        var match$10 = Js_json.decodeString(value$7);
        tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field slug on type Image is missing");
      }
      var match$11 = Js_dict.get(value$3, "rating");
      var tmp$5;
      if (match$11 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$8);
        if (match$12 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$13 = Js_json.decodeNumber(value$8);
          tmp$5 = match$13 !== undefined ? match$13 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        __typename: tmp$2,
        name: tmp$3,
        path: match$8 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$8))).map((function (value) {
                  var match = Js_json.decodeString(value);
                  if (match !== undefined) {
                    return match;
                  } else {
                    return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                  }
                })) : Js_exn.raiseError("graphql_ppx: Field path on type Image is missing"),
        slug: tmp$4,
        rating: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          rateImage: tmp
        };
}

function make$2(slug, rating, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "slug",
                    slug
                  ],
                  /* tuple */[
                    "rating",
                    rating
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var slug = variables.slug;
  var rating = variables.rating;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "slug",
                    slug
                  ],
                  /* tuple */[
                    "rating",
                    rating
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeVariables$2(slug, rating, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "slug",
                  slug
                ],
                /* tuple */[
                  "rating",
                  rating
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$2(graphql_ppx_use_json_variables_fn, slug, rating, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "slug",
                      slug
                    ],
                    /* tuple */[
                      "rating",
                      rating
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var RateImage = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

export {
  GalleryQuery ,
  MoreQuery ,
  RateImage ,
  
}
/* No side effect */
